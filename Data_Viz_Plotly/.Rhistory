# Filter away teams winning at halftime
df_ht_away <- df %>%
filter(HTR == "A")
# Filter away teams winning at halftime & fulltime
df_ft_away <- df_ht_away %>%
filter(FTR == "A")
away_win_prob <- calc_prob(df_ht_away, df_ft_away)
cat("Probability that the away team wins the game if they are leading at half time: ", away_win_prob, "%")
# Filter draw at halftime
df_ht_draw <- df %>%
filter(HTR == "D")
# Filter draw at halftime & fulltime
df_ft_draw <- df_ht_draw %>%
filter(FTR == "D")
draw_prob <- calc_prob(df_ht_draw, df_ft_draw)
cat("Probability that the game ends in a draw if the halftime result is also a draw: ", draw_prob, "%")
# Filter draw at halftime & the home team winning at fulltime
df_ht_draw_ft_home_win <- df_ht_draw %>%
filter(FTR == "H")
home_win_after_ht_draw_prob <- calc_prob(df_ht_draw, df_ht_draw_ft_home_win)
cat("Probability that the home team wins if the halftime result is a draw: ", home_win_after_ht_draw_prob, "%")
# Probability that the team winning at half time wins the game
ht_ft_win_prob <- round(((home_win_prob * nrow(df_ft_home)) + (away_win_prob * nrow(df_ft_away))) / (nrow(df_ft_home) + nrow(df_ft_away)), digits = 2)
cat("Probability that the team leading at half time wins the entire game: ", ht_ft_win_prob, "%")
# Count frequency of haltime & fulltime results
df_htr <- df %>% count(HTR)
df_ftr <- df %>% count(FTR)
df_htr
# Count frequency of haltime & fulltime results
df_htr <- df %>% count(HTR)
df_ftr <- df %>% count(FTR)
grid.arrange(tableGrob(df_htr), tableGrob(df_ftr), ncol = 2)
# Bibliotheken importieren
library("plotly")
library("plyr")
library("dplyr")
library("forcats")
library("RColorBrewer")
library("gridExtra")
# Bibliotheken importieren
library("plotly")
library("plyr")
library("dplyr")
library("forcats")
library("RColorBrewer")
# Count frequency of haltime & fulltime results
df_htr <- df %>% count(HTR)
df_ftr <- df %>% count(FTR)
t1 = kable(df_htr, format='html', output = FALSE)
# Bibliotheken importieren
library("plotly")
library("plyr")
library("dplyr")
library("forcats")
library("RColorBrewer")
library("knitr")
# Count frequency of haltime & fulltime results
df_htr <- df %>% count(HTR)
df_ftr <- df %>% count(FTR)
t1 = kable(df_htr, format='html', output = FALSE)
t2 = kable(df_ftr, format='html', output = FALSE)
cat(c('<table><tr valign="top"><td>', t1, '</td><td>', t2, '</td><tr></table>'), sep = '')
# Count frequency of haltime & fulltime results
df_htr <- df %>% count(HTR)
df_ftr <- df %>% count(FTR)
cbind(df_htr[1:nr, ], df_ftr[1:nr, ])
# Create dataframe for halftime & fulltime results and count frequency
df_htr <- df %>% count(HTR)
df_ftr <- df %>% count(FTR)
df_htr
df_ftr
# Create dataframe for halftime & fulltime results and count frequency
df_htr <- df %>% count(HTR)
df_ftr <- df %>% count(FTR)
# Halftime
df_htr
# Fulltime
df_ftr
# Create dataframe with halttime & fulltime result amounts
df_results <- data.frame(c("Away", "Draw", "Home"), c(df_htr$n), c(df_ftr$n))
# Rename column headers
col_headings <- c('Result','Halftime','Fulltime')
names(df_results) <- col_headings
df_results
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Results, y = ~Halftime, type = 'bar', name = 'Half Time Score') %>%
add_trace(y = ~Fulltime, name = 'Full Time Score') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
fig
# Create dataframe with halftime & fulltime result frequency
df_results <- data.frame(c("Away Team leads", "Draw", "Home Team leads"), c(df_htr$n), c(df_ftr$n))
# Rename column headers
col_headings <- c('Result','Halftime','Fulltime')
names(df_results) <- col_headings
df_results
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Results, y = ~Halftime, type = 'bar', name = 'Halftime score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime score') %>%
layout(yaxis = list(title = 'Amount'), barmode = 'group')
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Results, y = ~Halftime, type = 'bar', name = 'Halftime score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime score') %>%
layout(yaxis = list(title = 'Amount'), barmode = 'group')
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime score') %>%
layout(yaxis = list(title = 'Amount'), barmode = 'group')
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'), barmode = 'group')
fig
# Create dataframe with halftime & fulltime result frequency
df_results <- data.frame(c("Away Team win", "Draw", "Home Team win"), c(df_htr$n), c(df_ftr$n))
# Rename column headers
col_headings <- c('Result','Halftime','Fulltime')
names(df_results) <- col_headings
df_results
# Create dataframe with halftime & fulltime result frequency
df_results <- data.frame(c("Away win", "Draw", "Home win"), c(df_htr$n), c(df_ftr$n))
# Rename column headers
col_headings <- c('Result','Halftime','Fulltime')
names(df_results) <- col_headings
df_results
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'), barmode = 'group')
fig
# merge HTR & FTR to 1 column
df$result <- paste(df$HTR, df$FTR)
print("Example: H H = home team is winning at halftime and also wins the game at fulltime")
df
# Merge HTR & FTR to new column 'result'
df$result <- paste(df$HTR, df$FTR)
cat("Example: H H = home team is winning at halftime and also wins the game at fulltime")
df
# Merge HTR & FTR to new column 'result'
df$result <- paste(df$HTR, df$FTR)
# Example: H H = home team is winning at halftime and also wins the game at fulltime
df$result
# Merge HTR & FTR to new column 'result'
df$result <- paste(df$HTR, df$FTR)
# Example: H H = home team is winning at halftime and also wins the game at fulltime
df[,"result", drop=FALSE]
# Merge HTR & FTR to new column 'result'
df$result <- paste(df$HTR, df$FTR)
# Example: H H = home team is winning at halftime and also wins the game at fulltime
head(df[,"result", drop=FALSE])
# Merge HTR & FTR to new column 'result'
df$result <- paste(df$HTR, df$FTR)
# Example: H H = home team is winning at halftime and also wins the game at fulltime
df[,"result", drop=FALSE]
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, n, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?")
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?")
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result + "%", textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?")
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?")
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability of Game Progress"),
title = "How are the different game progresses distributed?")
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability of Game Progress"),
title = "How are the different game progresses distributed?",
width = 1000, height = 1000)
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability of Game Progress"),
title = "How are the different game progresses distributed?",
width = 700, height = 500)
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability of Game Progress"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 800, height = 500)
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 800, height = 500)
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 600, height = 700)
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 700, height = 500)
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 700, height = 600)
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 600, height = 600)
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 600, height = 500)
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 500, height = 500)
fig
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 600, height = 500)
fig
# Bibliotheken importieren
library("plotly")
library("plyr")
library("dplyr")
library("forcats")
library("RColorBrewer")
# List files in folder "Data"
files <- list.files(path="./Data/", pattern=NULL, all.files=FALSE, full.names=TRUE)
# Create Dataframe with all csv from years 2015-2019
df <- ldply(.data = files, .fun = read.csv)
#View(df)
# Create dataframe for halftime & fulltime results and count frequency
df_htr <- df %>% count(HTR)
df_ftr <- df %>% count(FTR)
# Halftime
df_htr
# Fulltime
df_ftr
# Create dataframe with halftime & fulltime result frequency
df_results <- data.frame(c("Away win", "Draw", "Home win"), c(df_htr$n), c(df_ftr$n))
# Rename column headers
col_headings <- c('Result','Halftime','Fulltime')
names(df_results) <- col_headings
df_results
# Plot grouped bar chart to visualize halftime & fulltime results
fig <- plot_ly(
df_results, x = ~Result, y = ~Halftime, type = 'bar', name = 'Halftime Score') %>%
add_trace(y = ~Fulltime, name = 'Fulltime Score') %>%
layout(yaxis = list(title = 'Amount'),
barmode = 'group',
width = 600, height = 500)
fig
# Merge HTR & FTR to new column 'result'
df$result <- paste(df$HTR, df$FTR)
# Example: H H = home team is winning at halftime and also wins the game at fulltime
df[,"result", drop=FALSE]
# Plot all different game progresses and their amount
df %>%
count(result) %>%
mutate(result = fct_reorder(result, n, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~n, text = ~n, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability of Game Progress"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
df_count_results %>%
plot_ly(labels = ~result, values = ~count_result) %>%
add_pie(hole = 0.4, color = I("white")) %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability %"),
title = "What is the probability of each game progress?")
# Calculate probability
calc_prob <- function(df1, df2) {
prob <- round((100 / nrow(df1) * nrow(df2)), digits = 2)
return(prob)
}
# Filter home teams winning at halftime
df_ht_home <- df %>%
filter(HTR == "H")
# Filter home teams winning at halftime & fulltime
df_ft_home <- df_ht_home %>%
filter(FTR == "H")
home_win_prob <- calc_prob(df_ht_home, df_ft_home)
cat("Probability that the home team wins the game if they are leading at half time: ", home_win_prob, "%")
# Filter away teams winning at halftime
df_ht_away <- df %>%
filter(HTR == "A")
# Filter away teams winning at halftime & fulltime
df_ft_away <- df_ht_away %>%
filter(FTR == "A")
away_win_prob <- calc_prob(df_ht_away, df_ft_away)
cat("Probability that the away team wins the game if they are leading at half time: ", away_win_prob, "%")
# Filter draw at halftime
df_ht_draw <- df %>%
filter(HTR == "D")
# Filter draw at halftime & fulltime
df_ft_draw <- df_ht_draw %>%
filter(FTR == "D")
draw_prob <- calc_prob(df_ht_draw, df_ft_draw)
cat("Probability that the game ends in a draw if the halftime result is also a draw: ", draw_prob, "%")
# Filter draw at halftime & the home team winning at fulltime
df_ht_draw_ft_home_win <- df_ht_draw %>%
filter(FTR == "H")
home_win_after_ht_draw_prob <- calc_prob(df_ht_draw, df_ht_draw_ft_home_win)
cat("Probability that the home team wins if the halftime result is a draw: ", home_win_after_ht_draw_prob, "%")
# Probability that the team winning at half time wins the game
ht_ft_win_prob <- round(((home_win_prob * nrow(df_ft_home)) + (away_win_prob * nrow(df_ft_away))) / (nrow(df_ft_home) + nrow(df_ft_away)), digits = 2)
cat("Probability that the team leading at half time wins the entire game: ", ht_ft_win_prob, "%")
# Group by game outcome & calculate probability of all outcomes
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
# Plot all different game progresses and their probability
df_count_results %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability of Game Progress (%)"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
# Plot all different game progresses and their amount
df_count_results <- df %>%
count(result) %>%
mutate(result = fct_reorder(result, n, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~n, text = ~n, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
# Plot all different game progresses and their amount
df_count_results <- df %>%
count(result) %>%
mutate(result = fct_reorder(result, n, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~n, text = ~n, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
# Group by game outcome & calculate probability of all outcomes
df_count_results_prob <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
# Plot all different game progresses and their probability
df_count_results_prob %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability of Game Progress (%)"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
# Plot all different game progresses and their amount
df_count_results <- df %>%
count(result)
df_count_results %>%
mutate(result = fct_reorder(result, n, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~n, text = ~n, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
# Group by game outcome & calculate probability of all outcomes
df_count_results_prob <- df %>%
group_by(result) %>%
summarise(count_result = round(n() / nrow(df) * 100, digits = 2))
# Plot all different game progresses and their probability
df_count_results_prob %>%
mutate(result = fct_reorder(result, count_result, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~count_result, text = ~count_result, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Probability of Game Progress (%)"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
subplot(df_count_results, df_count_results_prob, nrows = 1)
# Plot all different game progresses and their amount
df_count_results <- df %>%
count(result)
df_count_results %>%
mutate(result = fct_reorder(result, n, .desc = TRUE)) %>%
plot_ly(x = ~result, y = ~n, text = ~n, textposition = 'auto') %>%
add_bars() %>%
layout(xaxis = list(title = "Game Progress"),
yaxis = list(title = "Amount"),
title = "How are the different game progresses distributed?",
width = 800, height = 500)
