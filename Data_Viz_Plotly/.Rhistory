df_home <- df %>% filter(HTR == "H" & FTR == "H")
length(df_home)
length(df_home, axis(1))
length(df_home, axis(0))
nrow(df_home)
# HTR & FTR in 1 Spalte zusammenfügen
# Anzahl
df$result <- paste(df$HTR,df$FTR)
df
df %>% group_by(result) %>% summarise(count_n = count())
df %>% group_by(result) %>% summarise(count_n = count(result))
# HTR & FTR in 1 Spalte zusammenfügen
# Anzahl
df$result <- paste(df$HTR,df$FTR)
df
df %>% count(result)
#df %>% group_by(result) %>% summarise(count_n = count())
amount = sum(df$n)
print(amount)
# HTR & FTR in 1 Spalte zusammenfügen
# Anzahl
df$result <- paste(df$HTR,df$FTR)
df
df %>% count(result)
amount = sum(df$n)
print(amount)
# HTR & FTR in 1 Spalte zusammenfügen
# Anzahl
df$result <- paste(df$HTR,df$FTR)
df
df %>% group_by(result) %>% summarise(count_result = n())
df %>% group_by(result) %>% summarise(count_result = n() / nrow(df))
df %>% group_by(result) %>% summarise(count_result = n() / nrow(df) * 100)
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100) %>%
plot_ly(x = ~count_result) %>%
add_histogram()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df
df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100) %>%
plot_ly(x = ~count_result) %>%
add_histogram()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df$result
df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100) %>%
plot_ly(x = ~count_result) %>%
add_histogram()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df$result
df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100) %>%
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~count_result) %>%
add_histogram()
df_count_results
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~result) %>%
add_histogram()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results
fig <- plot_ly(x = ~df_count_results$count_result, type = "histogram")
fig
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~result, y = ~count_result) %>%
add_markers()
# Bibliotheken importieren
library("plotly")
library("plyr")
# List files in Data folder
files <- list.files(path="./Data/", pattern=NULL, all.files=FALSE, full.names=TRUE)
# Create DataFrame with all csv from 2015-2019
df <- ldply(.data = files, .fun = read.csv)
# View entire DataFrame in R Studio
#View(df)
group_by_referee <- aggregate(
x = df$Referee,
by = list(df$Referee),
FUN = function(x) length(unique(x)))
htr_table <- df %>%
count(HTR)
ftr_table <- df %>%
count(FTR)
Results = c("Away", "Draw", "Home")
HT_count <- c(htr_table$n)
FT_count <- c(ftr_table$n)
df_results <- data.frame(Results, HT_count, FT_count)
fig <- plot_ly(
df_results, x = ~Results, y = ~HT_count, type = 'bar', name = 'Half Time Score') %>%
add_trace(y = ~FT_count, name = 'Full Time Score') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
fig
# filtern HTR == FTR
# anzhal zählen
# vergleichen mit ganzer Datensatz
df_home <- df %>% filter(HTR == "H" & FTR == "H")
nrow(df_home)
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~result, y = ~count_result) %>%
add_bars()
df_count_results %>%
plot_ly(x = ~result, y = ~count_result, desc = TRUE) %>%
add_bars()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~result, y = ~count_result, desc = TRUE) %>%
add_bars()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~result, y = ~count_result, .desc = TRUE) %>%
add_bars()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result, .desc = TRUE) %>%
add_bars()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(count_result, result), y = ~count_result) %>%
add_bars()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result) %>%
add_bars()
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result) %>%
add_bars() %>%
layout(xaxis = list(categoryorder = "total descending"))
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result) %>%
add_bars() %>%
text = count_result %>%
layout(xaxis = list(categoryorder = "total descending"))
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result) %>%
add_bars() %>%
layout(xaxis = list(categoryorder = "total descending", title = "Probability"))
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result) %>%
add_bars() %>%
layout(xaxis = list(categoryorder = "total descending", title = "Game Progress"),
yaxis = list(title = "Probability"),
title = "What is the Probability of game progresses?")
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result) %>%
add_bars() %>%
layout(xaxis = list(categoryorder = "total descending", title = "Game Progress"),
yaxis = list(title = "Probability"),
title = "What is the probability of game progresses?")
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result) %>%
add_bars() %>%
layout(xaxis = list(categoryorder = "total descending", title = "Game Progress"),
yaxis = list(title = "Probability"),
title = "What is the probability of a game progress?")
# Bibliotheken importieren
library("plotly")
library("plyr")
# List files in Data folder
files <- list.files(path="./Data/", pattern=NULL, all.files=FALSE, full.names=TRUE)
# Create DataFrame with all csv from 2015-2019
df <- ldply(.data = files, .fun = read.csv)
# View entire DataFrame in R Studio
View(df)
htr_table <- df %>%
count(HTR)
ftr_table <- df %>%
count(FTR)
Results = c("Away", "Draw", "Home")
HT_count <- c(htr_table$n)
FT_count <- c(ftr_table$n)
df_results <- data.frame(Results, HT_count, FT_count)
fig <- plot_ly(
df_results, x = ~Results, y = ~HT_count, type = 'bar', name = 'Half Time Score') %>%
add_trace(y = ~FT_count, name = 'Full Time Score') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
fig
# HTR & FTR in einer Spalte zusammenfügen
df$result <- paste(df$HTR, df$FTR)
df_count_results <- df %>%
group_by(result) %>%
summarise(count_result = n() / nrow(df) * 100)
df_count_results %>%
plot_ly(x = ~reorder(result, count_result), y = ~count_result) %>%
add_bars() %>%
layout(xaxis = list(categoryorder = "total descending", title = "Game Progress"),
yaxis = list(title = "Probability"),
title = "What is the probability of a game progress?")
df_haltfime <- df %>% filter(HTR == "H")
df_haltfime
# Heimteams, die zur Halbzeit führen
df_haltfime_home <- df %>% filter(HTR == "H")
df_haltfime_home
df_haltfime_home_win <- df %>% filter(FTR == "H")
df_haltfime_home_draw <- df %>% filter(FTR == "D")
df_haltfime_home_loss <- df %>% filter(FTR == "A")
df_haltfime_home_win
# Heimteams, die zur Halbzeit führen
df_haltfime_home <- df %>% filter(HTR == "H")
df_haltfime_home_win <- df %>% filter(FTR == "H")
df_haltfime_home_draw <- df %>% filter(FTR == "D")
df_haltfime_home_loss <- df %>% filter(FTR == "A")
df_haltfime_home_win
# Heimteams, die zur Halbzeit führen
df_haltfime_home <- df %>% filter(HTR == "H")
df_haltfime_home_win <- df_haltfime_home %>% filter(FTR == "H")
df_haltfime_home_draw <- df_haltfime_home %>% filter(FTR == "D")
df_haltfime_home_loss <- df_haltfime_home %>% filter(FTR == "A")
df_haltfime_home_win
View(df_haltfime_home)
# Heimteams, die zur Halbzeit führen
df_halftime_home <- df %>% filter(HTR == "H")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_fulltime_home_draw <- df_halftime_home %>% filter(FTR == "D")
df_fulltime_home_loss <- df_haltfime_home %>% filter(FTR == "A")
home_win_prob <- 100 / nrow(df_halftime_home) * nrow(df_fulltime_home_win)
home_win_prob
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_away_win <- df_halftime_away %>% filter(FTR == "H")
df_halftime_away_draw <- df_halftime_away %>% filter(FTR == "D")
df_halftime_away_loss <- df_halftime_away %>% filter(FTR == "A")
away_win_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_win)
away_win_prob
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_halftime_away_draw <- df_halftime_away %>% filter(FTR == "D")
df_halftime_away_loss <- df_halftime_away %>% filter(FTR == "H")
away_win_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_win)
away_win_prob
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_halftime_away_draw <- df_halftime_away %>% filter(FTR == "D")
df_halftime_away_loss <- df_halftime_away %>% filter(FTR == "H")
away_win_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_win)
print(away_win_prob)
away_loss_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_loss)
print(away_loss_prob)
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_halftime_away_draw <- df_halftime_away %>% filter(FTR == "D")
df_halftime_away_loss <- df_halftime_away %>% filter(FTR == "H")
away_win_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_win)
print(away_win_prob)
away_loss_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_loss)
print(away_loss_prob)
away_draw_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_draw)
print(away_draw_prob)
df_halftime_draw <- df %>% filter(HTR == "D")
df_halftime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_halftime_away_draw <- df_halftime_away %>% filter(FTR == "D")
df_halftime_away_loss <- df_halftime_away %>% filter(FTR == "H")
away_win_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_win)
away_win_prob
df_halftime_away <- df %>% filter(HTR == "D")
df_halftime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_halftime_away_draw <- df_halftime_away %>% filter(FTR == "D")
df_halftime_away_loss <- df_halftime_away %>% filter(FTR == "H")
away_win_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_win)
print(away_win_prob)
away_loss_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_loss)
print(away_loss_prob)
away_draw_prob <- 100 / nrow(df_halftime_away) * nrow(df_halftime_away_draw)
print(away_draw_prob)
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_halftime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_halftime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
calc_prob <- function(df1, df2) {
win_prob <- 100 / nrow(df1) * nrow(df2)
}
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_halftime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_halftime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
print(home_win_prob)
# Auswärtsteam führt zur Halbzeit und gewinnt das Spiel
away_win_prob <- calc_prob(df_halftime_away, df_halftime_away_win)
print(away_win_prob)
# Unentschieden zur Halbzeit und auch am Ende des Spiels
draw_prob <- calc_prob(df_halftime_draw, df_halftime_draw)
print(draw_prob)
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_fulltime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_fulltime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
print(home_win_prob)
# Auswärtsteam führt zur Halbzeit und gewinnt das Spiel
away_win_prob <- calc_prob(df_halftime_away, df_fulltime_away_win)
print(away_win_prob)
# Unentschieden zur Halbzeit und auch am Ende des Spiels
draw_prob <- calc_prob(df_halftime_draw, df_fulltime_draw)
print(draw_prob)
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_fulltime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_fulltime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
print(home_win_prob)
# Auswärtsteam führt zur Halbzeit und gewinnt das Spiel
away_win_prob <- calc_prob(df_halftime_away, df_fulltime_away_win)
print(away_win_prob)
# Unentschieden zur Halbzeit und auch am Ende des Spiels
draw_prob <- calc_prob(df_halftime_draw, df_fulltime_draw)
print(draw_prob)
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_fulltime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_fulltime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
print(home_win_prob)
# Auswärtsteam führt zur Halbzeit und gewinnt das Spiel
away_win_prob <- calc_prob(df_halftime_away, df_fulltime_away_win)
print(away_win_prob)
# Unentschieden zur Halbzeit und auch am Ende des Spiels
draw_prob <- calc_prob(df_halftime_draw, df_fulltime_draw)
print(draw_prob)
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_fulltime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_fulltime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
print("fdfd" + home_win_prob)
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_fulltime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_fulltime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
print("fdfd", home_win_prob)
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_fulltime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_fulltime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
print(home_win_prob)
# Auswärtsteam führt zur Halbzeit und gewinnt das Spiel
away_win_prob <- calc_prob(df_halftime_away, df_fulltime_away_win)
print(away_win_prob)
# Unentschieden zur Halbzeit und auch am Ende des Spiels
draw_prob <- calc_prob(df_halftime_draw, df_fulltime_draw)
print(draw_prob)
df_halftime_home <- df %>% filter(HTR == "H")
df_halftime_away <- df %>% filter(HTR == "A")
df_halftime_draw <- df %>% filter(HTR == "D")
df_fulltime_home_win <- df_halftime_home %>% filter(FTR == "H")
df_fulltime_away_win <- df_halftime_away %>% filter(FTR == "A")
df_fulltime_draw <- df_halftime_draw %>% filter(FTR == "D")
# Heimteam führt zur Halbzeit und gewinnt das Spiel
home_win_prob <- calc_prob(df_halftime_home, df_fulltime_home_win)
print(home_win_prob)
print(nrow(df_fulltime_home_win))
# Auswärtsteam führt zur Halbzeit und gewinnt das Spiel
away_win_prob <- calc_prob(df_halftime_away, df_fulltime_away_win)
print(away_win_prob)
print(nrow(df_fulltime_away_win))
# Unentschieden zur Halbzeit und auch am Ende des Spiels
draw_prob <- calc_prob(df_halftime_draw, df_fulltime_draw)
print(draw_prob)
print(nrow(df_fulltime_draw))
# Bibliotheken importieren
library("plotly")
library("dplyr")
library("plyr")
# List files in Data folder
files <- list.files(path="./Data/", pattern=NULL, all.files=FALSE, full.names=TRUE)
# Create DataFrame with all csv from 2015-2019
df <- ldply(.data = files, .fun = read.csv)
# View entire DataFrame in R Studio
View(df)
htr_table <- df %>%
count(HTR)
# Bibliotheken importieren
library("plotly")
library("dplyr")
library("plyr")
# List files in Data folder
files <- list.files(path="./Data/", pattern=NULL, all.files=FALSE, full.names=TRUE)
# Create DataFrame with all csv from 2015-2019
df <- ldply(.data = files, .fun = read.csv)
# View entire DataFrame in R Studio
View(df)
htr_table <- df %>%
count(HTR)
